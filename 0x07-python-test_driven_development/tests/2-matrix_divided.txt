# Tests for matrix_divided function

>>> # Import matrix_divided function
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> # Test where all row elements are ints
>>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0], [2.33, 2.67, 3.0]]

>>> # Test where matrix is flattened/not a list of lists
>>> matrix = [1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> # Test where matrix is None
>>> matrix = None
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> # Test where a row is not a list
>>> matrix = ["row", [4, 5, 6], [7, 8, 9]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> # Test where an element in row is not int or float
>>> matrix = [[True, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> # Test where each row is not same size
>>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> # Test where div == 0
>>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> # Test where div is not int or float
>>> matrix_divided(matrix, "div")
Traceback (most recent call last):
TypeError: div must be a number

>>> # Check if new matrix is returned
>>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0], [2.33, 2.67, 3.0]]

>>> # Check that original matrix is not changed
>>> print(matrix)
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]


>>> # Test when div is 'inf'
>>> matrix_divided(matrix, 'inf')
Traceback (most recent call last):
TypeError: div must be a number

>>> # Test when div is float('inf') or -float('inf')
>>> matrix_divided(matrix, float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> matrix_divided(matrix, -float('inf'))
[[-0.0, -0.0, -0.0], [-0.0, -0.0, -0.0], [-0.0, -0.0, -0.0]]

>>> # Test when one argument is missing
>>> matrix_divided(matrix)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided(2)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> # Test when both arguments are missing
>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
